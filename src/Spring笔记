1.配置bean
 <bean id="helloWorld" class="com.study.spring.HelloWorld">
        <property name="name" value="Spring"/>
 </bean>

 class:bean的全类名，通过反射在IOC容器中创建bean的实例，所以要求bean类必须有一个无参的构造函数
 id:标识bean，必须唯一

 2.ApplicationContext代表IOC容器，有两个实现类
 ClassPathXmlApplicationContext
 FileSystemXmlApplicationContext

 3.Spring依赖注入的方式
    属性注入
    构造器注入
    工厂方法注入(很少使用，不推荐)
 4.使用构造器注入可以指定参数位置和类型，以区分重载的构造器
 5.Spring配置文件中特殊字符的处理(&<>""'五个符号)
    1.使用![CDATA[]]将字符包起来
    2.使用转义字符
    属性可以使用value属性或者value子节点配置

  6.使用级联属性时，要保证JavaBean中有对应的setXxx方法
         <bean id="person2" class="com.study.spring.Person">
                <constructor-arg value="天猫" type="java.lang.String"/>
                <constructor-arg value="23" type="int"/>
                <!--<constructor-arg><null/></constructor-arg>-->
                <constructor-arg ref="car2"/>
                <!--为级联属性赋值-->
                <property name="car.price" value="3333"/>
                <property name="car.address" value="北京"/>
            </bean>
   使用级联属性需要先为属性赋值，才能使用级联属性，否则会抛异常，和Struts2不同
   7.为list属性赋值
    <property name="cars">
               <list>
                   <ref bean="car"/>
                   <ref bean="car2"/>
               </list>
           </property>
    8.为map属性赋值
        使用map以及map的子节点entry
    9.配置Properties
        通过props和prop节点配置
              <property name="properties">
                        <props>
                            <prop key="username">root</prop>
                            <prop key="password">123456</prop>
                        </props>
                    </property>
        使用p命名空间简化属性配置
         <!--通过p命名空间为bean的属性赋值-->
            <bean id="person6" class="com.study.spring.Person"
                  p:age="12" p:name="lxn" p:cars-ref="cars"/>

        10.自动装配
            byName:根据bean在struts.xml中配置的id和bean的setter方法风格的属性进行装配，若匹配，则装配，否则不装配
            byType:根据bean的类型和当前bean的属性的类型装配，若容器中有一个以上bean的类型相同，则出异常

            自动装配缺点：不能装配个别属性
            不能同时根据name和type装配，不够灵活

        11.bean的关系
            bean可以通过parent属性引用一个bean，继承它的配置属性，如果bean添加属性abstrat属性
            ，那么它将作为一个模版，不能被实例化

        12.IOC容器中的bean默认都是单例的，即通过同一个id获取的bean是同一个对象
        可以在配置文件中修改bean的作用范围，有prototype和singleton
        singleton:创建容器的时候就初始化bean的对象，获取bean的时候直接获取就行
        protorype:创建容器的时候不初始化bean的对象，每次获取的时候都创建一次

        13.使用外部属性文件
            使用C3P0数据源需要导入三个jar包
            mchange-commons-java
            mysql-connector-java-5.1.43-bin.jar
            c3p0-0.9.5.2.jar

        14.SpEL 在配置文件中可以通过#{}引用属性

        15.Spring管理bean的生命周期
            BeanPostProcessor用来处理所有的bean，

        16.通过factory方式配置bean
                静态工厂方法：
                实例工厂方法：需要先配置工厂，然后通过factory-bean引用工厂
        17.通过FactoryBean配置
                <bean id="car" class="com.bean.factorybean.CarFactoryBean">
                        <property name="brand" value="baoma"/>
                    </bean>
             返回的实例是FactoryBean的getObject方法返回的实例

         18.通过注解配置bean
            <!--指定SpringIOC容器扫描的包以及它的子包-->
                <context:component-scan base-package="com.bean.anotation"/>
                resource-pattern:指定扫描哪些类
                include-filter 指定包含哪些表达式的组件，该子节点需要配合use-default-filters属性

          如果bean没有被装备到IOC容器中，这时候使用AutoWire注解会报错
          解决办法是在AutoWire的注解上加上属性required=false,可以避免异常(貌似新版本也不行了)

           @AutoWire 注解自动装配具有兼容类型的单个bean属性
           默认情况下，所有使用AutoWire的属性都要被设置，当Spring找不到需要装配的bean时，会
           抛异常，当某一个属性不允许被设置，可以设置AutoWire属性的required为false

           默认情况下，当IOC容器中存在多个类型兼容的Bean时，通过类型的自动装配将无法工作，
           此时可以在@Qualifier注解中提供bean的名称,名称是bean的类名的第一个字母小写
           例如userRepositoryImpl

           @AutoWire也可以用在集合上

        泛型依赖注入



         AOP